
@model Project.ViewModels.LIkeAndComment

@{

    ViewBag.Title = "Detiles";
}

<!DOCTYPE html>

<html>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="main">
            <div class="container">
                <div class="profile-info">
                    <h2 onclick="location.href='@Url.Action("Download", "Paper", new {Name = Model.paper.PaperFile })'">@Html.DisplayFor(model => model.paper.PaperName)</h2>
                    <p onclick="location.href='@Url.Action("ViewPage", "Author", new {id = Model.paper.Author.Id})'">
                        Publisher: @Html.DisplayFor(model => model.paper.Author.FName) @Html.DisplayFor(model => model.paper.Author.LName)
                    </p>
                    <p>Published Date: @Html.DisplayFor(model => model.paper.PublishDate)</p>
                </div>
                <div class="like-div">
                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.like.PaperId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.like.PaperId, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.papper } })
                            @Html.ValidationMessageFor(model => model.like.PaperId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.like.AuthorId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.like.AuthorId, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.autthor } })
                            @Html.ValidationMessageFor(model => model.like.AuthorId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.like.ActionDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.like.ActionDate, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToShortDateString() } })
                            @Html.ValidationMessageFor(model => model.like.ActionDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <h3 style="margin-bottom: 10px;">Did You Like it ?</h3>
                    <div class="form-group">
                        <div class="col-md-10">
                            @Html.RadioButtonFor(model => model.like.LikeP, "True") : Yes, I Like it <br />
                            @Html.RadioButtonFor(model => model.like.LikeP, "False") : No, I didn't like it
                            @Html.ValidationMessageFor(model => model.like.LikeP, "")
                        </div>
                    </div>
                </div>
                <div class="comment-div">
                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.comment.AId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.comment.AId, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.comment.AId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.comment.PaperId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.comment.PaperId, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.papper } })
                            @Html.ValidationMessageFor(model => model.comment.PaperId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.comment.AuthorId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.comment.AuthorId, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.autthor } })
                            @Html.ValidationMessageFor(model => model.comment.AuthorId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group" hidden>
                        @Html.LabelFor(model => model.comment.ActionDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.comment.ActionDate, new { htmlAttributes = new { @class = "form-control", @Value = DateTime.Now.ToShortDateString() } })
                            @Html.ValidationMessageFor(model => model.comment.ActionDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <p>What is your opinion about it ?</p>
                    <div class="form-group">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.comment.Comment, new { htmlAttributes = new { @class = "form-control", placeholder = "Write a comment" } })
                            @Html.ValidationMessageFor(model => model.comment.Comment, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div>
                    <input type="submit" value="Submit" class="paper-btn" /><br />
                    <a>@Html.ActionLink("View Comments", "ViewComment", new { id = Model.paper.PaperId })</a> || 
                    <a>@Html.ActionLink("View Likes", "ViewLikes", new { id = Model.paper.PaperId })</a>
                </div>

            </div>
        </div>
    }
</body>
</html>
